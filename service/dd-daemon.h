/*
 * Generated by gdbus-codegen 2.47.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __DD_DAEMON_H__
#define __DD_DAEMON_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.dd.service */

#define TYPE_COM_DD_SERVICE (com_dd_service_get_type ())
#define COM_DD_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_DD_SERVICE, ComDdService))
#define IS_COM_DD_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_DD_SERVICE))
#define COM_DD_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_COM_DD_SERVICE, ComDdServiceIface))

struct _ComDdService;
typedef struct _ComDdService ComDdService;
typedef struct _ComDdServiceIface ComDdServiceIface;

struct _ComDdServiceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_ioctl) (
    ComDdService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_pin,
    guint arg_uin);

  gboolean (*handle_test) (
    ComDdService *object,
    GDBusMethodInvocation *invocation,
    gint arg_pin);

  void (*notification) (
    ComDdService *object,
    GVariant *arg_data);

  void (*test) (
    ComDdService *object,
    gint arg_data);

};

GType com_dd_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *com_dd_service_interface_info (void);
guint com_dd_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void com_dd_service_complete_ioctl (
    ComDdService *object,
    GDBusMethodInvocation *invocation,
    GVariant *pout,
    guint uout);

void com_dd_service_complete_test (
    ComDdService *object,
    GDBusMethodInvocation *invocation,
    gint pout);



/* D-Bus signal emissions functions: */
void com_dd_service_emit_notification (
    ComDdService *object,
    GVariant *arg_data);

void com_dd_service_emit_test (
    ComDdService *object,
    gint arg_data);



/* D-Bus method calls: */
void com_dd_service_call_ioctl (
    ComDdService *proxy,
    GVariant *arg_pin,
    guint arg_uin,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_dd_service_call_ioctl_finish (
    ComDdService *proxy,
    GVariant **out_pout,
    guint *out_uout,
    GAsyncResult *res,
    GError **error);

gboolean com_dd_service_call_ioctl_sync (
    ComDdService *proxy,
    GVariant *arg_pin,
    guint arg_uin,
    GVariant **out_pout,
    guint *out_uout,
    GCancellable *cancellable,
    GError **error);

void com_dd_service_call_test (
    ComDdService *proxy,
    gint arg_pin,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_dd_service_call_test_finish (
    ComDdService *proxy,
    gint *out_pout,
    GAsyncResult *res,
    GError **error);

gboolean com_dd_service_call_test_sync (
    ComDdService *proxy,
    gint arg_pin,
    gint *out_pout,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_COM_DD_SERVICE_PROXY (com_dd_service_proxy_get_type ())
#define COM_DD_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_DD_SERVICE_PROXY, ComDdServiceProxy))
#define COM_DD_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_DD_SERVICE_PROXY, ComDdServiceProxyClass))
#define COM_DD_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_DD_SERVICE_PROXY, ComDdServiceProxyClass))
#define IS_COM_DD_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_DD_SERVICE_PROXY))
#define IS_COM_DD_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_DD_SERVICE_PROXY))

typedef struct _ComDdServiceProxy ComDdServiceProxy;
typedef struct _ComDdServiceProxyClass ComDdServiceProxyClass;
typedef struct _ComDdServiceProxyPrivate ComDdServiceProxyPrivate;

struct _ComDdServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ComDdServiceProxyPrivate *priv;
};

struct _ComDdServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType com_dd_service_proxy_get_type (void) G_GNUC_CONST;

void com_dd_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComDdService *com_dd_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ComDdService *com_dd_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void com_dd_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComDdService *com_dd_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ComDdService *com_dd_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_COM_DD_SERVICE_SKELETON (com_dd_service_skeleton_get_type ())
#define COM_DD_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_DD_SERVICE_SKELETON, ComDdServiceSkeleton))
#define COM_DD_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_DD_SERVICE_SKELETON, ComDdServiceSkeletonClass))
#define COM_DD_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_DD_SERVICE_SKELETON, ComDdServiceSkeletonClass))
#define IS_COM_DD_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_DD_SERVICE_SKELETON))
#define IS_COM_DD_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_DD_SERVICE_SKELETON))

typedef struct _ComDdServiceSkeleton ComDdServiceSkeleton;
typedef struct _ComDdServiceSkeletonClass ComDdServiceSkeletonClass;
typedef struct _ComDdServiceSkeletonPrivate ComDdServiceSkeletonPrivate;

struct _ComDdServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ComDdServiceSkeletonPrivate *priv;
};

struct _ComDdServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType com_dd_service_skeleton_get_type (void) G_GNUC_CONST;

ComDdService *com_dd_service_skeleton_new (void);


G_END_DECLS

#endif /* __DD_DAEMON_H__ */
